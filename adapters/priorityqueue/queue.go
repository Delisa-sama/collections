package priorityqueue

import (
	"github.com/Delisa-sama/collections/algorithms"
	"github.com/Delisa-sama/collections/comparator"
	"github.com/Delisa-sama/collections/interfaces"
)

// container - это интерфейс, описывающий контейнер, поддерживающий базовые операции работы с элементами.
// Контейнер должен предоставлять возможность добавления элементов в конец, удаления из начала,
// доступа к первому элементу, а также итерацию по элементам с помощью итераторов.
type container[T any] interface {
	interfaces.Container[T]
	// Front возвращает первый элемент в контейнере.
	Front() T
	// PushBack добавляет элемент в конец контейнера.
	PushBack(T)
	// PopFront удаляет первый элемент из контейнера.
	PopFront()
	// Begin возвращает итератор на начало контейнера.
	Begin() interfaces.RandomAccessIterator[T]
	// End возвращает итератор на конец контейнера.
	End() interfaces.RandomAccessIterator[T]
}

// containerConstructor представляет собой функцию-конструктор, которая создает экземпляр контейнера с элементами.
// Параметры:
// - items: начальные элементы, которые будут добавлены в контейнер.
// Возвращает: созданный контейнер C, содержащий элементы.
type containerConstructor[T any, C container[T]] func(...T) C

// PriorityQueue представляет собой приоритетную очередь, которая поддерживает сортировку элементов
// согласно переданному компаратору. Очередь работает на основе контейнера C, который управляет хранением элементов.
// Тип T - это тип элементов, хранящихся в очереди.
// Тип C - это тип контейнера, реализующий интерфейс container, используемый для управления элементами.
type PriorityQueue[T any, C container[T]] struct {
	c    C                  // Контейнер, реализующий функциональность очереди.
	comp comparator.Less[T] // Компаратор, используемый для сортировки элементов по приоритету.
}

// NewPriorityQueue создает новую приоритетную очередь
// с использованием указанного конструктора контейнера и компаратора.
// Элементы будут отсортированы согласно компаратору при создании очереди.
// Параметры:
// - cc: функция-конструктор, которая создает контейнер.
// - comp: функция-компаратор, определяющая приоритет элементов в очереди.
// - items: начальные элементы, которые будут добавлены в очередь.
// Возвращает: указатель на созданную приоритетную очередь.
func NewPriorityQueue[T any, C container[T]](
	cc containerConstructor[T, C],
	comp comparator.Less[T],
	items ...T,
) *PriorityQueue[T, C] {
	q := &PriorityQueue[T, C]{
		c:    cc(items...),
		comp: comp,
	}
	// Сортировка элементов в контейнере по заданному компаратору.
	algorithms.SortC(q.c.Begin(), q.c.End(), comp)
	return q
}

// Push добавляет новый элемент в приоритетную очередь. После добавления, элементы переупорядочиваются
// согласно компаратору, чтобы поддерживать правильный порядок приоритетов.
// Параметры:
// - value: элемент, который будет добавлен в очередь.
func (q *PriorityQueue[T, C]) Push(value T) {
	q.c.PushBack(value)
	// Переупорядочивание элементов после добавления нового.
	algorithms.SortC(q.c.Begin(), q.c.End(), q.comp)
}

// Top возвращает элемент с наивысшим приоритетом (первый элемент в очереди) без его удаления.
// Возвращает: первый элемент из очереди.
func (q *PriorityQueue[T, C]) Top() T {
	return q.c.Front()
}

// Pop удаляет элемент с наивысшим приоритетом (первый элемент) из очереди.
func (q *PriorityQueue[T, C]) Pop() {
	q.c.PopFront()
}

// Size возвращает количество элементов в приоритетной очереди.
// Возвращает: количество элементов в очереди.
func (q *PriorityQueue[T, C]) Size() uint {
	return q.c.Size()
}

// IsEmpty проверяет, пуста ли приоритетная очередь.
// Возвращает: true, если очередь пуста, иначе false.
func (q *PriorityQueue[T, C]) IsEmpty() bool {
	return q.c.IsEmpty()
}
